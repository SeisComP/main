The archive tool scart reads and writes :term:`SDS` archives and files
in miniSEED format and checks miniSEED archives or prints stream information.

* **Dump mode:** Create miniSEED files (multiplexed), e.g. for playbacks, from
  :term:`SDS` structured data (e.g. created by slarchive).
* **Dump mode:** Play back records directly out of an SDS structure.
* **Import mode:** Import multiplexed miniSEED files into a local SDS waveform
  archive.
* **Import mode:** Import data using the :ref:`global_recordstream` interface
  into a local SDS waveform archive.
* **Import mode:** Read data from any :ref:`global_recordstream` interface
  and dump it to file.
* **Check mode:** Check an archive of miniSEED files for out-of-order records in
  files.

.. warning::

   * When creating :term:`SDS` archives, scart simply appends the new records to
     existing ones. Multiple imports of the same data result in duplication.
   * Out-of-order imports of waveforms into a SDS archive result in out-of-order
     records which may not be processed. Clean your archive using :ref:`scmssort`.
   * The new input data for an SDS archive must be sorted by time. Otherwise,
     the SDS archive may not be correctly readable. Combine scart with
     :ref:`scmssort` for multiplexing and removal of duplicates.

.. hint::

   In dump mode output streams may be controlled by

   * Time window - stream lists (:option:`--list`, dump mode) generated by
     :ref:`scevtstreams` for particular events
   * NSLC lists (:option:`--nslc`) created, e.g., with :ref:`scinv` from
     inventories.


.. _scart-config:

Configuration
=============

scart can make use of :ref:`global_recordstream`
implementations which are provided by additional plugins.
For loading additional plugins, e.g. the *xyz* plugin create and configure :file:`scart.cfg`:

.. code-block:: sh

   plugins = xyz


Examples
========

.. hint::

   The usage of wildcards in place of network, station, location or channel code
   is allowed in many options (-n, -c, -l, --list, --nslc) and follows these rules:

   * Import mode: the wildcards are passed to the :ref:`global_recordstream` interface,
     that interprets them. Normally both "*" and "?" are supported by RecordStreams.
   * Dump mode: the wildcards are interpreted by scart command that supports "*" for
     network, station, location codes and "*", "?", "(", ")", "|" for channel code.

#. Extract data from the default :term:`SDS` archive in :file:`$SEISCOMP_ROOT/var/lib/archive`
   or from a local :term:`SDS` archive [SDS archive] into a miniSEED file :file:`file.mseed`
   and sort by end time of the records:

   .. code-block:: sh

      scart -dsvE -t '[start-time]~[end-time]' [SDS archive] > [file.mseed]
      scart -dsvE -t '[start-time]~[end-time]' > file.mseed
      scart -dsvE -t '[start-time]~[end-time]' -n '[NET1],[NET2]' > file.mseed
      scart -dsvE -t '[start-time]~[end-time]' -n '[NET]' -c '(E,H)H(1,2,3)' > file.mseed
      scart -dsvE -t '[start-time]~[end-time]' -n '[N1.S1.L1.C1],[N2.S2.L2.C2]' > file.mseed
      scart -dsvE -t '[start-time]~[end-time]' --nslc list.file > file.mseed
      scart -dsvE -t --list list.file > file.mseed

   .. note::

      Sorting data is computational expensive but required for waveform playbacks.

#. Push miniSEED data from file :file:`file.mseed` into a local :term:`SDS`
   archive. Additionally, you may check if the records of the created files are
   correctly ordered:

   .. code-block:: sh

      scart -I [file.mseed] [SDS archive]
      scart -I [file.mseed] --with-filecheck [SDS archive]

#. Collect data using the :ref:`global_recordstream` interface (e.g. FDSNWS server)
   and write to a miniSEED file or import it into a local :term:`SDS` archive. The
   data streams and the time spans can be defined in several ways. The data streams
   (::option:`list`) can be automatically generated, e.g., by :ref:`scevtstreams`.

   .. code-block:: sh

      scart -I fdsnws://[server]:80 --list list.file [SDS archive]
      scart -I fdsnws://[server]:80 --list list.file --stdout > file.mseed
      scart -I fdsnws://[server]:80 -t '[start-time]~[end-time]' --nslc list.file [SDS archive]
      scart -I fdsnws://[server]:80 -t '[start-time]~[end-time]' -n '[NET1],[NET2]' [SDS archive]
      scart -I fdsnws://[server]:80 -t '[start-time]~[end-time]' -n '[NET]' -c 'EH?' [SDS archive]
      scart -I fdsnws://[server]:80 -t '[start-time]~[end-time]' -n '[N1.S1.L1.C1],[N2.S2.L2.C2]' [SDS archive]

   It is possible to achieve the same result of the dump mode using a 
   combination of the input mode and the :ref:`scmssort` command, which allows
   to read the input data from any supported :ref:`global_recordstream`,
   not only an SDS archive:

   .. code-block:: sh

      scart -I [record-stream] --list list.file --stdout | \
        scmssort -u -E -v > file.mseed

#. Check all files of an SDS archive or other directory structure for
   miniSEED files with out-of-order records:

   .. code-block:: sh

      scart --check [archive]

#. Print stream information from miniSEED files in archives or from
   :term:`RecordStream` without actually writing miniSEED data:

   .. code-block:: sh

      scart -I [miniSEED file] --print-streams
      scart -d -t [time span] [SDS archive] --print-streams
      scart --check [archive] --print-streams

   The output looks like this:

   .. code-block:: sh

      # streamID       start                       end                         records samples samplingRate
      GE.RGN..BHZ      2022-12-08T15:34:41.895Z    2022-12-08T15:52:19.145Z    58 21145 20.0

   where the header and the text body are printed to stdout.
